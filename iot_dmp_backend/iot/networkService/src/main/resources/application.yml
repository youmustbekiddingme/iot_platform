server:
  port: 8080
#spring:
#  profiles:
#    active: #spring.profiles.active#

spring:
  datasource:
      url: jdbc:mysql://localhost:3306/clh
      username: root
      password: 123456
      driverClassName: com.mysql.jdbc.Driver
      # 使用druid数据源
      type: com.alibaba.druid.pool.DruidDataSource
      # 配置获取连接等待超时的时间
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 1
      minIdle: 3
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 30000
      validationQuery: select 'x'
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true


#参数配置
params:
  devicePath: device.properties
  networkService:
    tcp:
      ip: 192.168.0.59
      port: 9999
    udp:
      ip: 192.168.0.59
      port: 10000
      heartbeat: 200
      packNums: 100
      sendReceiveDelayTime: 3000

#日志配置
logging:
  config: classpath:logback-boot.xml

mybatis:
  #映射文件*.xml的位置
  mapper-locations: classpath:mapper/*.xml

  #扫描别名，一定要与@Alias注解连用
  type-aliases-package: com.clh.iot.networkService.pojo

   #开启驼峰映射
  configuration:
    map-underscore-to-camel-case: true
